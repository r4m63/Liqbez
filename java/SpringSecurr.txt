BASIC AUTH - Spring

Процесс предоставления доступа пользователю:
1) Идентификация - поиск пользователя в системе по (ид, логину, почте и тд - однозначно идентифицировать)
2) Аутентификация - подтверждение подлиности по (секретной информации, паролю, коду, OTP, одноразовый пароль, последние цифры номера телефона)
	1+2 пункты в современных приложениях происходит одновременно, но внтури приложения все происходит раздельно
3) Авторизация - Определение прав доступа, разграничение прав доступа для ресурсов.


Как Spring Security интегрируется в приложения - через систему ФИЛЬТРОВ - прежде чем попасть в сервлет
Пользователь отправляет запрос на получение доступа к ресурсу.




Абстракции в Spring Security:
	
	Authentication - Представляет текущего аутентифицированного пользователя.
		Содержит:
		Principal (основная информация о пользователе, например, имя).
		Credentials (пароль или токен).
		Authorities (роли и права).
	AuthenticationManager - Главный компонент, который обрабатывает аутентификацию.
		Проверяет данные пользователя с помощью AuthenticationProvider.
	AuthenticationProvider - Проверяет данные для аутентификации.
		Например, DaoAuthenticationProvider для проверки логина/пароля.
	SecurityContext - Хранит информацию о текущей аутентификации.
		Связан с текущей сессией.
	SecurityContextHolder - Статический хранилище, где SecurityContext доступен во время выполнения.
	
	FilterChainProxy - Центральный класс, управляющий цепочкой фильтров.
		Каждый запрос проходит через набор фильтров, например:
		UsernamePasswordAuthenticationFilter — обрабатывает логин/пароль.
		BasicAuthenticationFilter — проверяет Basic Auth.
	
	
	
Подробная логика работы Spring Security:
	
	Входящий запрос:
		Каждый запрос обрабатывается FilterChainProxy.
	Аутентификация:
		Если пользователь не аутентифицирован, запускается фильтр (например, BasicAuthenticationFilter или
		UsernamePasswordAuthenticationFilter).
		Данные передаются в AuthenticationManager.
	Авторизация:
		После успешной аутентификации проверяются права пользователя на запрашиваемый ресурс (через 
		AccessDecisionManager).
	Ответ клиенту:
		Если запрос разрешен, он передается дальше в приложение.
		Если нет, возвращается ошибка (например, 403 Forbidden).	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


















